name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # 支持手动触发
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm lint

      # - name: Run tests
      #   run: pnpm test

  build:
    name: Build and Push
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: version
        run: echo "version=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.ALIYUN_DOCKER_USERNAME }}
          password: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.ALIYUN_NAMESPACE }}/love-note-backend:latest
            ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.ALIYUN_NAMESPACE }}/love-note-backend:${{ github.sha }}

  deploy:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Copy files to production
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: './docker/production/*' # 明确指定 production 目录下的文件
          target: '/root/app/love-note/backend' # 使用绝对路径
          strip_components: 2 # 因为路径多了一层 production，所以这里改为 2

      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            # 设置错误时立即退出
            set -e

            echo "开始部署流程..."
            # 先进入项目目录
            cd /root/app/love-note/backend && \

            # 登录到阿里云容器服务
            echo "正在登录阿里云容器服务..."
            docker login --username=${{ secrets.ALIYUN_DOCKER_USERNAME }} --password=${{ secrets.ALIYUN_DOCKER_PASSWORD }} ${{ secrets.DOCKER_REGISTRY }} || {
              echo "❌ 登录失败"
              exit 1
            }

            # 拉取最新镜像
            echo "拉取最新镜像..."
            docker pull ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.ALIYUN_NAMESPACE }}/love-note-backend:latest || {
              echo "❌ 拉取镜像失败"
              exit 1
            }

            # 确保网络存在
            docker network create love-note-network || true && \

            # 创建 .env 文件
            echo "创建 .env 文件..."
            cat > /root/app/love-note/backend/.env << EOF
            # Docker Registry
            DOCKER_REGISTRY=${{ secrets.DOCKER_REGISTRY }}
            ALIYUN_NAMESPACE=${{ secrets.ALIYUN_NAMESPACE }}

            # All volumes driver
            VOLUMES_DRIVER=${{ secrets.VOLUMES_DRIVER }}

            # All Networks driver
            NETWORKS_DRIVER=${{ secrets.NETWORKS_DRIVER }}

            # 时区
            WORKSPACE_TIMEZONE=${{ secrets.WORKSPACE_TIMEZONE }}

            # Server
            SERVER_PORT=${{ secrets.SERVER_PORT }}

            # MySQL
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            MYSQL_HOST=${{ secrets.MYSQL_HOST }}
            MYSQL_PORT=${{ secrets.MYSQL_PORT }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_DATA_PATH=${{ secrets.MYSQL_DATA_PATH }}
            MYSQL_CNF_PATH=${{ secrets.MYSQL_CNF_PATH }}

            # Redis
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}

            # JWT
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}

            # Email
            EMAIL_USER=${{ secrets.EMAIL_USER }}
            EMAIL_PASS=${{ secrets.EMAIL_PASS }}

            # Upload
            UPLOAD_MAX_FILE_SIZE=10
            UPLOAD_MAX_FILE_COUNT=9
            UPLOAD_DESTINATION=uploads

            EOF

            # 停止并删除现有的 MySQL 容器，但保留数据
            echo "停止并删除现有的 MySQL 容器..."
            docker-compose rm -sf mysql

            # 使用新的环境变量重新创建 MySQL 容器
            echo "使用新的环境变量重新创建 MySQL 容器..."
            docker-compose up -d mysql

            # 等待 MySQL 完全启动
            echo "等待 MySQL 启动..."
            for i in {1..30}; do
              if docker-compose exec -T mysql mysqladmin ping -h localhost -u root -p${{ secrets.MYSQL_PASSWORD }}  --silent; then
                echo "MySQL 已启动"
                break
              fi
              echo "等待 MySQL 启动... $i/30"
              sleep 2
            done

            # 运行迁移
            docker run --rm \
              --network love-note-network \
              -e MYSQL_HOST=${{ secrets.MYSQL_HOST }} \
              -e MYSQL_PORT=${{ secrets.MYSQL_PORT }} \
              -e MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }} \
              -e MYSQL_USER=${{ secrets.MYSQL_USER }} \
              -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.ALIYUN_NAMESPACE }}/love-note-backend:latest \
              pnpm migration:run && \

            # 启动容器
            echo "启动容器..."

            # 拉取镜像
            docker-compose pull && \

            # 启动容器
            docker-compose up -d
            echo "✅ 部署完成"
